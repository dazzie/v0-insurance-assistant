"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DISCORDConfigThreadMessageModeEnum = exports.DISCORDConfigFilterLogicEnum = exports.DISCORDConfigThreadMessageInclusionEnum = void 0;
exports.instanceOfDISCORDConfig = instanceOfDISCORDConfig;
exports.DISCORDConfigFromJSON = DISCORDConfigFromJSON;
exports.DISCORDConfigFromJSONTyped = DISCORDConfigFromJSONTyped;
exports.DISCORDConfigToJSON = DISCORDConfigToJSON;
exports.DISCORDConfigToJSONTyped = DISCORDConfigToJSONTyped;
/**
 * @export
 */
exports.DISCORDConfigThreadMessageInclusionEnum = {
    All: 'ALL',
    Filter: 'FILTER'
};
/**
 * @export
 */
exports.DISCORDConfigFilterLogicEnum = {
    And: 'AND',
    Or: 'OR'
};
/**
 * @export
 */
exports.DISCORDConfigThreadMessageModeEnum = {
    Concatenate: 'CONCATENATE',
    Single: 'SINGLE'
};
/**
 * Check if a given object implements the DISCORDConfig interface.
 */
function instanceOfDISCORDConfig(value) {
    return true;
}
function DISCORDConfigFromJSON(json) {
    return DISCORDConfigFromJSONTyped(json, false);
}
function DISCORDConfigFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'emoji': json['emoji'] == null ? undefined : json['emoji'],
        'author': json['author'] == null ? undefined : json['author'],
        'ignoreAuthor': json['ignore-author'] == null ? undefined : json['ignore-author'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'threadMessageInclusion': json['thread-message-inclusion'] == null ? undefined : json['thread-message-inclusion'],
        'filterLogic': json['filter-logic'] == null ? undefined : json['filter-logic'],
        'threadMessageMode': json['thread-message-mode'] == null ? undefined : json['thread-message-mode'],
    };
}
function DISCORDConfigToJSON(json) {
    return DISCORDConfigToJSONTyped(json, false);
}
function DISCORDConfigToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'emoji': value['emoji'],
        'author': value['author'],
        'ignore-author': value['ignoreAuthor'],
        'limit': value['limit'],
        'thread-message-inclusion': value['threadMessageInclusion'],
        'filter-logic': value['filterLogic'],
        'thread-message-mode': value['threadMessageMode'],
    };
}
