"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvancedQueryMatchTypeEnum = exports.AdvancedQueryModeEnum = void 0;
exports.instanceOfAdvancedQuery = instanceOfAdvancedQuery;
exports.AdvancedQueryFromJSON = AdvancedQueryFromJSON;
exports.AdvancedQueryFromJSONTyped = AdvancedQueryFromJSONTyped;
exports.AdvancedQueryToJSON = AdvancedQueryToJSON;
exports.AdvancedQueryToJSONTyped = AdvancedQueryToJSONTyped;
/**
 * @export
 */
exports.AdvancedQueryModeEnum = {
    Text: 'text',
    Vector: 'vector',
    Hybrid: 'hybrid'
};
/**
 * @export
 */
exports.AdvancedQueryMatchTypeEnum = {
    Match: 'match',
    MatchPhrase: 'match_phrase',
    MultiMatch: 'multi_match'
};
/**
 * Check if a given object implements the AdvancedQuery interface.
 */
function instanceOfAdvancedQuery(value) {
    return true;
}
function AdvancedQueryFromJSON(json) {
    return AdvancedQueryFromJSONTyped(json, false);
}
function AdvancedQueryFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return __assign(__assign({}, json), { 'mode': json['mode'] == null ? undefined : json['mode'], 'textFields': json['text-fields'] == null ? undefined : json['text-fields'], 'matchType': json['match-type'] == null ? undefined : json['match-type'], 'textBoost': json['text-boost'] == null ? undefined : json['text-boost'], 'filters': json['filters'] == null ? undefined : json['filters'] });
}
function AdvancedQueryToJSON(json) {
    return AdvancedQueryToJSONTyped(json, false);
}
function AdvancedQueryToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return __assign(__assign({}, value), { 'mode': value['mode'], 'text-fields': value['textFields'], 'match-type': value['matchType'], 'text-boost': value['textBoost'], 'filters': value['filters'] });
}
