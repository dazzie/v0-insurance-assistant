"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceConnectorType = void 0;
exports.instanceOfSourceConnectorType = instanceOfSourceConnectorType;
exports.SourceConnectorTypeFromJSON = SourceConnectorTypeFromJSON;
exports.SourceConnectorTypeFromJSONTyped = SourceConnectorTypeFromJSONTyped;
exports.SourceConnectorTypeToJSON = SourceConnectorTypeToJSON;
exports.SourceConnectorTypeToJSONTyped = SourceConnectorTypeToJSONTyped;
/**
 *
 * @export
 */
exports.SourceConnectorType = {
    AwsS3: 'AWS_S3',
    AzureBlob: 'AZURE_BLOB',
    Confluence: 'CONFLUENCE',
    Discord: 'DISCORD',
    Dropbox: 'DROPBOX',
    DropboxOauth: 'DROPBOX_OAUTH',
    DropboxOauthMulti: 'DROPBOX_OAUTH_MULTI',
    DropboxOauthMultiCustom: 'DROPBOX_OAUTH_MULTI_CUSTOM',
    FileUpload: 'FILE_UPLOAD',
    GoogleDriveOauth: 'GOOGLE_DRIVE_OAUTH',
    GoogleDrive: 'GOOGLE_DRIVE',
    GoogleDriveOauthMulti: 'GOOGLE_DRIVE_OAUTH_MULTI',
    GoogleDriveOauthMultiCustom: 'GOOGLE_DRIVE_OAUTH_MULTI_CUSTOM',
    Firecrawl: 'FIRECRAWL',
    Gcs: 'GCS',
    Zoom: 'ZOOM',
    ZoomAdmin: 'ZOOM_ADMIN',
    Intercom: 'INTERCOM',
    Notion: 'NOTION',
    NotionOauthMulti: 'NOTION_OAUTH_MULTI',
    NotionOauthMultiCustom: 'NOTION_OAUTH_MULTI_CUSTOM',
    OneDrive: 'ONE_DRIVE',
    Sharepoint: 'SHAREPOINT',
    WebCrawler: 'WEB_CRAWLER',
    Github: 'GITHUB',
    Fireflies: 'FIREFLIES',
    Docusign: 'DOCUSIGN',
    Gmail: 'GMAIL'
};
function instanceOfSourceConnectorType(value) {
    for (var key in exports.SourceConnectorType) {
        if (Object.prototype.hasOwnProperty.call(exports.SourceConnectorType, key)) {
            if (exports.SourceConnectorType[key] === value) {
                return true;
            }
        }
    }
    return false;
}
function SourceConnectorTypeFromJSON(json) {
    return SourceConnectorTypeFromJSONTyped(json, false);
}
function SourceConnectorTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
function SourceConnectorTypeToJSON(value) {
    return value;
}
function SourceConnectorTypeToJSONTyped(value, ignoreDiscriminator) {
    return value;
}
