"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceConnectorInputTypeEnum = void 0;
exports.instanceOfSourceConnectorInput = instanceOfSourceConnectorInput;
exports.SourceConnectorInputFromJSON = SourceConnectorInputFromJSON;
exports.SourceConnectorInputFromJSONTyped = SourceConnectorInputFromJSONTyped;
exports.SourceConnectorInputToJSON = SourceConnectorInputToJSON;
exports.SourceConnectorInputToJSONTyped = SourceConnectorInputToJSONTyped;
var SourceConnectorInputConfig_1 = require("./SourceConnectorInputConfig");
/**
 * @export
 */
exports.SourceConnectorInputTypeEnum = {
    AwsS3: 'AWS_S3',
    AzureBlob: 'AZURE_BLOB',
    Confluence: 'CONFLUENCE',
    Discord: 'DISCORD',
    Dropbox: 'DROPBOX',
    DropboxOauth: 'DROPBOX_OAUTH',
    DropboxOauthMulti: 'DROPBOX_OAUTH_MULTI',
    DropboxOauthMultiCustom: 'DROPBOX_OAUTH_MULTI_CUSTOM',
    FileUpload: 'FILE_UPLOAD',
    GoogleDriveOauth: 'GOOGLE_DRIVE_OAUTH',
    GoogleDrive: 'GOOGLE_DRIVE',
    GoogleDriveOauthMulti: 'GOOGLE_DRIVE_OAUTH_MULTI',
    GoogleDriveOauthMultiCustom: 'GOOGLE_DRIVE_OAUTH_MULTI_CUSTOM',
    Firecrawl: 'FIRECRAWL',
    Gcs: 'GCS',
    Zoom: 'ZOOM',
    ZoomAdmin: 'ZOOM_ADMIN',
    Intercom: 'INTERCOM',
    Notion: 'NOTION',
    NotionOauthMulti: 'NOTION_OAUTH_MULTI',
    NotionOauthMultiCustom: 'NOTION_OAUTH_MULTI_CUSTOM',
    OneDrive: 'ONE_DRIVE',
    Sharepoint: 'SHAREPOINT',
    WebCrawler: 'WEB_CRAWLER',
    Github: 'GITHUB',
    Fireflies: 'FIREFLIES',
    Docusign: 'DOCUSIGN',
    Gmail: 'GMAIL'
};
/**
 * Check if a given object implements the SourceConnectorInput interface.
 */
function instanceOfSourceConnectorInput(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    if (!('config' in value) || value['config'] === undefined)
        return false;
    return true;
}
function SourceConnectorInputFromJSON(json) {
    return SourceConnectorInputFromJSONTyped(json, false);
}
function SourceConnectorInputFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'type': json['type'],
        'config': (0, SourceConnectorInputConfig_1.SourceConnectorInputConfigFromJSON)(json['config']),
    };
}
function SourceConnectorInputToJSON(json) {
    return SourceConnectorInputToJSONTyped(json, false);
}
function SourceConnectorInputToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'type': value['type'],
        'config': (0, SourceConnectorInputConfig_1.SourceConnectorInputConfigToJSON)(value['config']),
    };
}
