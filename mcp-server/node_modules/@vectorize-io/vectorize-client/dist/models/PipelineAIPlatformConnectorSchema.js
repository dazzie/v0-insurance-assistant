"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfPipelineAIPlatformConnectorSchema = instanceOfPipelineAIPlatformConnectorSchema;
exports.PipelineAIPlatformConnectorSchemaFromJSON = PipelineAIPlatformConnectorSchemaFromJSON;
exports.PipelineAIPlatformConnectorSchemaFromJSONTyped = PipelineAIPlatformConnectorSchemaFromJSONTyped;
exports.PipelineAIPlatformConnectorSchemaToJSON = PipelineAIPlatformConnectorSchemaToJSON;
exports.PipelineAIPlatformConnectorSchemaToJSONTyped = PipelineAIPlatformConnectorSchemaToJSONTyped;
var AIPlatformTypeForPipeline_1 = require("./AIPlatformTypeForPipeline");
var AIPlatformConfigSchema_1 = require("./AIPlatformConfigSchema");
/**
 * Check if a given object implements the PipelineAIPlatformConnectorSchema interface.
 */
function instanceOfPipelineAIPlatformConnectorSchema(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    if (!('config' in value) || value['config'] === undefined)
        return false;
    return true;
}
function PipelineAIPlatformConnectorSchemaFromJSON(json) {
    return PipelineAIPlatformConnectorSchemaFromJSONTyped(json, false);
}
function PipelineAIPlatformConnectorSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'type': (0, AIPlatformTypeForPipeline_1.AIPlatformTypeForPipelineFromJSON)(json['type']),
        'config': (0, AIPlatformConfigSchema_1.AIPlatformConfigSchemaFromJSON)(json['config']),
    };
}
function PipelineAIPlatformConnectorSchemaToJSON(json) {
    return PipelineAIPlatformConnectorSchemaToJSONTyped(json, false);
}
function PipelineAIPlatformConnectorSchemaToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'type': (0, AIPlatformTypeForPipeline_1.AIPlatformTypeForPipelineToJSON)(value['type']),
        'config': (0, AIPlatformConfigSchema_1.AIPlatformConfigSchemaToJSON)(value['config']),
    };
}
