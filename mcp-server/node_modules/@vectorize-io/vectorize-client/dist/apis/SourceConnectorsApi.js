"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceConnectorsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var SourceConnectorsApi = /** @class */ (function (_super) {
    __extends(SourceConnectorsApi, _super);
    function SourceConnectorsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a user to a source connector
     * Add a user to a source connector
     */
    SourceConnectorsApi.prototype.addUserToSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling addUserToSourceConnector().');
                        }
                        if (requestParameters['sourceConnectorId'] == null) {
                            throw new runtime.RequiredError('sourceConnectorId', 'Required parameter "sourceConnectorId" was null or undefined when calling addUserToSourceConnector().');
                        }
                        if (requestParameters['addUserToSourceConnectorRequest'] == null) {
                            throw new runtime.RequiredError('addUserToSourceConnectorRequest', 'Required parameter "addUserToSourceConnectorRequest" was null or undefined when calling addUserToSourceConnector().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources/{sourceConnectorId}/users".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))).replace("{".concat("sourceConnectorId", "}"), encodeURIComponent(String(requestParameters['sourceConnectorId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.AddUserToSourceConnectorRequestToJSON)(requestParameters['addUserToSourceConnectorRequest']),
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AddUserFromSourceConnectorResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a user to a source connector
     * Add a user to a source connector
     */
    SourceConnectorsApi.prototype.addUserToSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addUserToSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Creates a new source connector for data ingestion. The specific configuration fields required depend on the connector type selected.
     * Create a new source connector
     */
    SourceConnectorsApi.prototype.createSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling createSourceConnector().');
                        }
                        if (requestParameters['createSourceConnectorRequest'] == null) {
                            throw new runtime.RequiredError('createSourceConnectorRequest', 'Required parameter "createSourceConnectorRequest" was null or undefined when calling createSourceConnector().');
                        }
                        queryParameters = {};
                        if (requestParameters['workspaceId'] != null) {
                            queryParameters['workspaceId'] = requestParameters['workspaceId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateSourceConnectorRequestToJSON)(requestParameters['createSourceConnectorRequest']),
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.CreateSourceConnectorResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Creates a new source connector for data ingestion. The specific configuration fields required depend on the connector type selected.
     * Create a new source connector
     */
    SourceConnectorsApi.prototype.createSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a source connector
     * Delete a source connector
     */
    SourceConnectorsApi.prototype.deleteSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling deleteSourceConnector().');
                        }
                        if (requestParameters['sourceConnectorId'] == null) {
                            throw new runtime.RequiredError('sourceConnectorId', 'Required parameter "sourceConnectorId" was null or undefined when calling deleteSourceConnector().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources/{sourceConnectorId}".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))).replace("{".concat("sourceConnectorId", "}"), encodeURIComponent(String(requestParameters['sourceConnectorId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.DeleteSourceConnectorResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Delete a source connector
     * Delete a source connector
     */
    SourceConnectorsApi.prototype.deleteSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a source connector user
     * Delete a source connector user
     */
    SourceConnectorsApi.prototype.deleteUserFromSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling deleteUserFromSourceConnector().');
                        }
                        if (requestParameters['sourceConnectorId'] == null) {
                            throw new runtime.RequiredError('sourceConnectorId', 'Required parameter "sourceConnectorId" was null or undefined when calling deleteUserFromSourceConnector().');
                        }
                        if (requestParameters['removeUserFromSourceConnectorRequest'] == null) {
                            throw new runtime.RequiredError('removeUserFromSourceConnectorRequest', 'Required parameter "removeUserFromSourceConnectorRequest" was null or undefined when calling deleteUserFromSourceConnector().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources/{sourceConnectorId}/users".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))).replace("{".concat("sourceConnectorId", "}"), encodeURIComponent(String(requestParameters['sourceConnectorId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.RemoveUserFromSourceConnectorRequestToJSON)(requestParameters['removeUserFromSourceConnectorRequest']),
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.RemoveUserFromSourceConnectorResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Delete a source connector user
     * Delete a source connector user
     */
    SourceConnectorsApi.prototype.deleteUserFromSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteUserFromSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a source connector
     * Get a source connector
     */
    SourceConnectorsApi.prototype.getSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling getSourceConnector().');
                        }
                        if (requestParameters['sourceConnectorId'] == null) {
                            throw new runtime.RequiredError('sourceConnectorId', 'Required parameter "sourceConnectorId" was null or undefined when calling getSourceConnector().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources/{sourceConnectorId}".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))).replace("{".concat("sourceConnectorId", "}"), encodeURIComponent(String(requestParameters['sourceConnectorId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SourceConnectorFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a source connector
     * Get a source connector
     */
    SourceConnectorsApi.prototype.getSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all existing source connectors
     * Get all existing source connectors
     */
    SourceConnectorsApi.prototype.getSourceConnectorsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling getSourceConnectors().');
                        }
                        queryParameters = {};
                        if (requestParameters['workspaceId'] != null) {
                            queryParameters['workspaceId'] = requestParameters['workspaceId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.GetSourceConnectors200ResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all existing source connectors
     * Get all existing source connectors
     */
    SourceConnectorsApi.prototype.getSourceConnectors = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSourceConnectorsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update a source connector
     * Update a source connector
     */
    SourceConnectorsApi.prototype.updateSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling updateSourceConnector().');
                        }
                        if (requestParameters['sourceConnectorId'] == null) {
                            throw new runtime.RequiredError('sourceConnectorId', 'Required parameter "sourceConnectorId" was null or undefined when calling updateSourceConnector().');
                        }
                        if (requestParameters['updateSourceConnectorRequest'] == null) {
                            throw new runtime.RequiredError('updateSourceConnectorRequest', 'Required parameter "updateSourceConnectorRequest" was null or undefined when calling updateSourceConnector().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources/{sourceConnectorId}".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))).replace("{".concat("sourceConnectorId", "}"), encodeURIComponent(String(requestParameters['sourceConnectorId']))),
                            method: 'PATCH',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateSourceConnectorRequestToJSON)(requestParameters['updateSourceConnectorRequest']),
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.UpdateSourceConnectorResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update a source connector
     * Update a source connector
     */
    SourceConnectorsApi.prototype.updateSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update a source connector user
     * Update a source connector user
     */
    SourceConnectorsApi.prototype.updateUserInSourceConnectorRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['organizationId'] == null) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling updateUserInSourceConnector().');
                        }
                        if (requestParameters['sourceConnectorId'] == null) {
                            throw new runtime.RequiredError('sourceConnectorId', 'Required parameter "sourceConnectorId" was null or undefined when calling updateUserInSourceConnector().');
                        }
                        if (requestParameters['updateUserInSourceConnectorRequest'] == null) {
                            throw new runtime.RequiredError('updateUserInSourceConnectorRequest', 'Required parameter "updateUserInSourceConnectorRequest" was null or undefined when calling updateUserInSourceConnector().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("bearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/org/{organizationId}/connectors/sources/{sourceConnectorId}/users".replace("{".concat("organizationId", "}"), encodeURIComponent(String(requestParameters['organizationId']))).replace("{".concat("sourceConnectorId", "}"), encodeURIComponent(String(requestParameters['sourceConnectorId']))),
                            method: 'PATCH',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateUserInSourceConnectorRequestToJSON)(requestParameters['updateUserInSourceConnectorRequest']),
                        }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.UpdateUserInSourceConnectorResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update a source connector user
     * Update a source connector user
     */
    SourceConnectorsApi.prototype.updateUserInSourceConnector = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateUserInSourceConnectorRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SourceConnectorsApi;
}(runtime.BaseAPI));
exports.SourceConnectorsApi = SourceConnectorsApi;
